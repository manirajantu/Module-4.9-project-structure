{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAdornmentConfig = getAdornmentConfig;\nexports.getAdornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput;\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _TextInputIcon = _interopRequireWildcard(require(\"./TextInputIcon\"));\n\nvar _TextInputAffix = _interopRequireWildcard(require(\"./TextInputAffix\"));\n\nvar _constants = require(\"../constants\");\n\nvar _enums = require(\"./enums\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction getAdornmentConfig(_ref) {\n  var left = _ref.left,\n      right = _ref.right;\n  var adornmentConfig = [];\n\n  if (left || right) {\n    [{\n      side: _enums.AdornmentSide.Left,\n      adornment: left\n    }, {\n      side: _enums.AdornmentSide.Right,\n      adornment: right\n    }].forEach(function (_ref2) {\n      var side = _ref2.side,\n          adornment = _ref2.adornment;\n\n      if (adornment && _react.default.isValidElement(adornment)) {\n        var type;\n\n        if (adornment.type === _TextInputAffix.default) {\n          type = _enums.AdornmentType.Affix;\n        } else if (adornment.type === _TextInputIcon.default) {\n          type = _enums.AdornmentType.Icon;\n        }\n\n        adornmentConfig.push({\n          side: side,\n          type: type\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nfunction getAdornmentStyleAdjustmentForNativeInput(_ref3) {\n  var adornmentConfig = _ref3.adornmentConfig,\n      leftAffixWidth = _ref3.leftAffixWidth,\n      rightAffixWidth = _ref3.rightAffixWidth,\n      paddingHorizontal = _ref3.paddingHorizontal,\n      _ref3$inputOffset = _ref3.inputOffset,\n      inputOffset = _ref3$inputOffset === void 0 ? 0 : _ref3$inputOffset,\n      mode = _ref3.mode;\n\n  if (adornmentConfig.length) {\n    var adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(function (_ref4) {\n      var _ref7;\n\n      var type = _ref4.type,\n          side = _ref4.side;\n      var isLeftSide = side === _enums.AdornmentSide.Left;\n      var inputModeAdornemntOffset = mode === _enums.InputMode.Outlined ? _constants.ADORNMENT_OFFSET + _constants.OUTLINED_INPUT_OFFSET : _constants.ADORNMENT_OFFSET;\n      var paddingKey = \"padding\" + captalize(side);\n      var affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n      var padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;\n      var offset = affixWidth + padding;\n      var isAffix = type === _enums.AdornmentType.Affix;\n      var marginKey = \"margin\" + captalize(side);\n      return _ref7 = {}, (0, _defineProperty2.default)(_ref7, marginKey, isAffix ? 0 : offset), (0, _defineProperty2.default)(_ref7, paddingKey, isAffix ? offset : inputOffset), _ref7;\n    });\n    var allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(function (mergedStyles, currentStyle) {\n      return _objectSpread(_objectSpread({}, mergedStyles), currentStyle);\n    }, {});\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nvar captalize = function captalize(text) {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\n\nvar TextInputAdornment = function TextInputAdornment(_ref5) {\n  var adornmentConfig = _ref5.adornmentConfig,\n      left = _ref5.left,\n      right = _ref5.right,\n      onAffixChange = _ref5.onAffixChange,\n      textStyle = _ref5.textStyle,\n      visible = _ref5.visible,\n      topPosition = _ref5.topPosition,\n      isTextInputFocused = _ref5.isTextInputFocused,\n      forceFocus = _ref5.forceFocus,\n      paddingHorizontal = _ref5.paddingHorizontal,\n      maxFontSizeMultiplier = _ref5.maxFontSizeMultiplier;\n\n  if (adornmentConfig.length) {\n    return _react.default.createElement(_react.default.Fragment, null, adornmentConfig.map(function (_ref6) {\n      var type = _ref6.type,\n          side = _ref6.side;\n      var inputAdornmentComponent;\n\n      if (side === _enums.AdornmentSide.Left) {\n        inputAdornmentComponent = left;\n      } else if (side === _enums.AdornmentSide.Right) {\n        inputAdornmentComponent = right;\n      }\n\n      var commonProps = {\n        key: side,\n        side: side,\n        testID: side + \"-\" + type + \"-adornment\",\n        isTextInputFocused: isTextInputFocused,\n        paddingHorizontal: paddingHorizontal\n      };\n\n      if (type === _enums.AdornmentType.Icon) {\n        return _react.default.createElement(_TextInputIcon.IconAdornment, _extends({}, commonProps, {\n          icon: inputAdornmentComponent,\n          topPosition: topPosition[_enums.AdornmentType.Icon],\n          forceFocus: forceFocus\n        }));\n      } else if (type === _enums.AdornmentType.Affix) {\n        return _react.default.createElement(_TextInputAffix.AffixAdornment, _extends({}, commonProps, {\n          topPosition: topPosition[_enums.AdornmentType.Affix][side],\n          affix: inputAdornmentComponent,\n          textStyle: textStyle,\n          onLayout: onAffixChange[side],\n          visible: visible,\n          maxFontSizeMultiplier: maxFontSizeMultiplier\n        }));\n      } else {\n        return null;\n      }\n    }));\n  } else {\n    return null;\n  }\n};\n\nvar _default = TextInputAdornment;\nexports.default = _default;","map":{"version":3,"sources":["TextInputAdornment.tsx"],"names":["right","adornmentConfig","left","side","AdornmentSide","adornment","React","type","AdornmentType","inputOffset","mode","adornmentStyleAdjustmentForNativeInput","isLeftSide","inputModeAdornemntOffset","InputMode","ADORNMENT_OFFSET","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","currentStyle","text","TextInputAdornment","maxFontSizeMultiplier","inputAdornmentComponent","commonProps","key","testID","isTextInputFocused","paddingHorizontal","topPosition","forceFocus","onAffixChange"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from '../constants';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged =\n      adornmentStyleAdjustmentForNativeInput.reduce(\n        (mergedStyles, currentStyle) => {\n          return {\n            ...mergedStyles,\n            ...currentStyle,\n          };\n        },\n        {}\n      );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n                maxFontSizeMultiplier={maxFontSizeMultiplier}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]},"metadata":{},"sourceType":"script"}